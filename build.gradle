import me.modmuss50.mpp.ReleaseType

plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT" apply false
    id "dev.architectury.loom" version "1.11-SNAPSHOT" apply false
    id "io.github.juuxel.loom-quiltflower" version "1.7.1" apply false
    id "me.modmuss50.mod-publish-plugin" version "0.8.4"
    id "com.matthewprenger.cursegradle" version "1.+"
    id "com.modrinth.minotaur" version "2.+"
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    group = mod_group_id
    version = mod_version
    archivesBaseName = mod_id

    repositories {
        // Moonlight
        maven { url = "https://registry.somethingcatchy.net/repository/maven-releases/" }
        // Local + Standard
        mavenLocal()
        mavenCentral()

        // Local mod folder
        flatDir { dirs "mods" }

        // Releases / General mod deps
        maven { url = "https://jitpack.io" }
        maven { url = "https://maven.neoforged.net" }
        maven { url = "https://maven.architectury.dev" }
        maven { url = "https://api.modrinth.com/maven" }
        maven { url = "https://maven.su5ed.dev/releases" }
        maven { url = "https://maven.ladysnake.org/releases" }
        maven { url = "https://maven.createmod.net" } // Ponder, Flywheel
        maven { url = "https://maven.blamejared.com" } // JEI, Vazkii's Mods
        maven { url = "https://maven.tterrag.com/" } // Flywheel
        maven { url = "https://harleyoconnor.com/maven" } // Dynamic Trees
        maven { url = "https://maven.theillusivec4.top/" } // Curios API
        maven { url = "https://maven.squiddev.cc" } // CC: Tweaked
        maven { url = "https://maven.saps.dev/releases" } // FTB Mods
        maven { url = "https://maven.parchmentmc.org" }
        maven { url = "https://www.cursemaven.com"}
        maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven" }  // NeoForge config api port, needed by Ponder
        maven { url = "https://maven.misterpemodder.com/libs-release/" } // ShulkerBoxTooltip
        maven { url = "https://maven.firstdarkdev.xyz/snapshots" } // FirstDarkDev (snapshots)

        // Registrate, Porting Lib, etc.
        maven { url = "https://mvn.devos.one/releases/" }
        maven { url = "https://mvn.devos.one/snapshots/" }

        // Special scoped maven
        maven { // Reach Entity Attributes
            url = "https://maven.jamieswhiteshirt.com/libs-release"
            content { includeGroup("com.jamieswhiteshirt") }
        }

    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(rootProject.java_version.toInteger())
        }
        withSourcesJar()
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
    }
}

architectury {
    minecraft = minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "io.github.juuxel.loom-quiltflower"
    apply plugin: "me.modmuss50.mod-publish-plugin"
    apply plugin: "com.matthewprenger.cursegradle"
    apply plugin: "com.modrinth.minotaur"

    loom { silentMojangMappingsLicense() }

    dependencies {
        minecraft "com.mojang:minecraft:${minecraft_version}"
        mappings loom.layered() {
            it.officialMojangMappings { setNameSyntheticMembers(false) }
            it.parchment("org.parchmentmc.data:parchment-${parchment_version}")
        }
    }

    publishing {
        repositories {
            mavenLocal()

            def nexusToken = providers.environmentVariable("NEXUS_TOKEN")
            def nexusUser = providers.environmentVariable("NEXUS_USER")
            if (nexusToken && nexusUser) {
                maven {
                    url = uri("https://registry.somethingcatchy.net/repository/maven-releases/")
                    credentials {
                        username = nexusUser.get()
                        password = nexusToken.get()
                    }
                }
            }
        }
    }

    // --- Release metadata & per-loader config
    def modLoader = project.name
    def changelogFile = rootProject.file("changelog.md")
    def changelogText = changelogFile.exists() ? changelogFile.text : ""
    def mcVersions = listGameVersions(minecraft_min_version, minecraft_version)
    def cfToken = providers.environmentVariable("CURSEFORGE_TOKEN")
    def mrToken = providers.environmentVariable("MODRINTH_TOKEN")

    publishMods {
        file = remapJar.archiveFile
        type = parseReleaseType(release_type)
        changelog = changelogText
        displayName = file.map { it.asFile.name }

        if (cfToken.isPresent()) {
            curseforge {
                accessToken = cfToken
                projectId = cf_project_id
                clientRequired = true
                serverRequired = true
                minecraftVersions.addAll(mcVersions)
                javaVersions.add(JavaVersion.toVersion(java_version))
                modLoaders.add(modLoader)
                if (modLoader == "fabric") {
                    requires {
                        slug = "fabric-api"
                    }
                } else {
                }
            }
        }

        if (mrToken.isPresent()) {
            modrinth {
                accessToken = mrToken
                projectId = mr_project_id
                modLoaders.add(modLoader)
                minecraftVersions.addAll(mcVersions)
                if (modLoader == "fabric") {
                    requires {
                        slug = "fabric-api"
                    }
                } else {

                }
            }
        }
    }


    if (mrToken.isPresent()) {
        modrinth {
            projectId = mod_id
            uploadFile = tasks.remapJar
            gameVersions = mcVersions
            if (modLoader == "forge") {
                loaders = ["neoforge"]
            } else loaders = [modLoader]
            changelog = changelogText
            versionNumber = mod_version + "-" + modLoader
            versionType = release_type
            if (modLoader == "fabric") {
                dependencies {
                    required.project "fabric-api"
                    required.project "moonlight"
                }
            } else {
                dependencies {
                    required.project "moonlight"
                }
            }
        }
    }

    if (cfToken.isPresent()) {
        curseforge {
            apiKey = cfToken.get()
            project {
                id = cf_project_id
                changelog = changelogText
                releaseType = release_type
                for (var ver : mcVersions) {
                    addGameVersion ver
                }

                if (modLoader == "neoforge") {
                    addGameVersion("NeoForge")
                } else addGameVersion modLoader.capitalize()

                mainArtifact(tasks.remapJar)

                if (modLoader == "fabric") {
                    relations {
                        requiredDependency "fabric-api"
                        requiredDependency "selene"

                        optionalDependency "the-bumblezone-fabric"
                        optionalDependency "decorative-blocks"
                        optionalDependency("flan")
                        optionalDependency("multi-item-lib")
                        optionalDependency("snowy-spirit")
                        optionalDependency("haunted-harvest")
                        optionalDependency("model-gap-fix")
                        optionalDependency("map-atlases")
                        optionalDependency("farmers-delight-fabric")
                    }
                } else {
                    relations {
                        requiredDependency("selene")

                        optionalDependency("create")
                        optionalDependency("quark")
                        optionalDependency("cc-tweaked")
                        optionalDependency("waystones")
                        optionalDependency("roughly-enough-items")
                        optionalDependency("jei")
                        optionalDependency("model-gap-fix")
                        optionalDependency("flywheel")
                        optionalDependency("configured")
                        optionalDependency("flan-forge")
                        optionalDependency("haunted-harvest")
                        optionalDependency("snowy-spirit")
                        optionalDependency("map-atlases-forge")
                        optionalDependency("decorative-blocks")
                        optionalDependency("farmers-delight")
                        optionalDependency("the-bumblezone-forge")
                        optionalDependency("map-atlases-forge")
                    }
                }
            }
        }
    }

}

ext.replaceProperties = [
        minecraft_version    : minecraft_version,
        minecraft_min_version: minecraft_min_version,
        minecraft_max_version: minecraft_max_version,
        pack_format_number   : pack_format_number,

        mod_id               : mod_id,
        mod_name             : mod_name,
        mod_version          : mod_version,
        mod_license          : mod_license,
        mod_authors          : mod_authors,
        mod_description      : mod_description,
        mod_credits          : mod_credits,
        mod_homepage         : mod_homepage,
        mod_github           : mod_github,

        neo_version          : neo_version,
        neo_version_range    : neo_version_range,
        loader_version_range : loader_version_range,

        moonlight_version_range: moonlight_version_range,
]

// --- Utils
static def listGameVersions(String minVersion, String maxVersion) {
// minVersion like "1.20", maxVersion like "1.20.4"
    def versions = []
    versions << minVersion
    int endPatch = Integer.parseInt(maxVersion.split('\\.')[2])
    for (int i = 1; i <= endPatch; i++) {
        versions << "${minVersion}.${i}"
    }
    return versions
}

static ReleaseType parseReleaseType(String s) {
    switch (s.toLowerCase()) {
        case "alpha":
            return ReleaseType.ALPHA
        case "beta":
            return ReleaseType.BETA
        default:
            return ReleaseType.STABLE
    }
}

tasks.register('buildAndpublishAll') {
    dependsOn ':clean'
    dependsOn ':build'
    dependsOn ':neoforge:curseforge'
    dependsOn ':neoforge:modrinth'
    dependsOn ':fabric:curseforge'
    dependsOn ':fabric:modrinth'
    dependsOn ':publish'

    group = 'build'
    description = 'Runs clean, build, and publish neoforge and fabric'
}


tasks.register('buildAndpublishAll2') {
    dependsOn ':clean'
    dependsOn ':build'
    dependsOn ':neoforge:publishCurseforge'
    dependsOn ':neoforge:publishModrinth'
    dependsOn ':fabric:publishCurseforge'
    dependsOn ':fabric:publishModrinth'
    dependsOn ':publish'

    group = 'build'
    description = 'Runs clean, build, and publish neoforge and fabric'
}